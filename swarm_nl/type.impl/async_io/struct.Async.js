(function() {var type_impls = {
"libp2p":[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Async%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/async_io/lib.rs.html#605\">source</a><a href=\"#impl-Async%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"struct\" href=\"async_io/struct.Async.html\" title=\"struct async_io::Async\">Async</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.77.0/std/os/fd/raw/trait.AsRawFd.html\" title=\"trait std::os::fd::raw::AsRawFd\">AsRawFd</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.new\" class=\"method\"><a class=\"src rightside\" href=\"src/async_io/lib.rs.html#630\">source</a><h4 class=\"code-header\">pub fn <a href=\"async_io/struct.Async.html#tymethod.new\" class=\"fn\">new</a>(io: T) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.77.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"async_io/struct.Async.html\" title=\"struct async_io::Async\">Async</a>&lt;T&gt;, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.77.0/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Creates an async I/O handle.</p>\n<p>This method will put the handle in non-blocking mode and register it in\n<a href=\"https://en.wikipedia.org/wiki/Epoll\">epoll</a>/<a href=\"https://en.wikipedia.org/wiki/Kqueue\">kqueue</a>/<a href=\"https://illumos.org/man/port_create\">event ports</a>/<a href=\"https://learn.microsoft.com/en-us/windows/win32/fileio/i-o-completion-ports\">IOCP</a>.</p>\n<p>On Unix systems, the handle must implement <code>AsRawFd</code>, while on Windows it must implement\n<code>AsRawSocket</code>.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>async_io::Async;\n<span class=\"kw\">use </span>std::net::{SocketAddr, TcpListener};\n\n<span class=\"kw\">let </span>listener = TcpListener::bind(SocketAddr::from(([<span class=\"number\">127</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>], <span class=\"number\">0</span>)))<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>listener = Async::new(listener)<span class=\"question-mark\">?</span>;</code></pre></div>\n</div></details></div></details>",0,"libp2p::tcp::async_io::TcpStream"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Async%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/async_io/lib.rs.html#772\">source</a><a href=\"#impl-Async%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"struct\" href=\"async_io/struct.Async.html\" title=\"struct async_io::Async\">Async</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_ref\" class=\"method\"><a class=\"src rightside\" href=\"src/async_io/lib.rs.html#786\">source</a><h4 class=\"code-header\">pub fn <a href=\"async_io/struct.Async.html#tymethod.get_ref\" class=\"fn\">get_ref</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.0/std/primitive.reference.html\">&amp;T</a></h4></section></summary><div class=\"docblock\"><p>Gets a reference to the inner I/O handle.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>async_io::Async;\n<span class=\"kw\">use </span>std::net::TcpListener;\n\n<span class=\"kw\">let </span>listener = Async::&lt;TcpListener&gt;::bind(([<span class=\"number\">127</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>], <span class=\"number\">0</span>))<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>inner = listener.get_ref();</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_mut\" class=\"method\"><a class=\"src rightside\" href=\"src/async_io/lib.rs.html#803\">source</a><h4 class=\"code-header\">pub fn <a href=\"async_io/struct.Async.html#tymethod.get_mut\" class=\"fn\">get_mut</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.0/std/primitive.reference.html\">&amp;mut T</a></h4></section></summary><div class=\"docblock\"><p>Gets a mutable reference to the inner I/O handle.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>async_io::Async;\n<span class=\"kw\">use </span>std::net::TcpListener;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>listener = Async::&lt;TcpListener&gt;::bind(([<span class=\"number\">127</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>], <span class=\"number\">0</span>))<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>inner = listener.get_mut();</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_inner\" class=\"method\"><a class=\"src rightside\" href=\"src/async_io/lib.rs.html#825\">source</a><h4 class=\"code-header\">pub fn <a href=\"async_io/struct.Async.html#tymethod.into_inner\" class=\"fn\">into_inner</a>(self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.77.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;T, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.77.0/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Unwraps the inner I/O handle.</p>\n<p>This method will <strong>not</strong> put the I/O handle back into blocking mode.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>async_io::Async;\n<span class=\"kw\">use </span>std::net::TcpListener;\n\n<span class=\"kw\">let </span>listener = Async::&lt;TcpListener&gt;::bind(([<span class=\"number\">127</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>], <span class=\"number\">0</span>))<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>inner = listener.into_inner()<span class=\"question-mark\">?</span>;\n\n<span class=\"comment\">// Put the listener back into blocking mode.\n</span>inner.set_nonblocking(<span class=\"bool-val\">false</span>)<span class=\"question-mark\">?</span>;</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.readable\" class=\"method\"><a class=\"src rightside\" href=\"src/async_io/lib.rs.html#848\">source</a><h4 class=\"code-header\">pub fn <a href=\"async_io/struct.Async.html#tymethod.readable\" class=\"fn\">readable</a>(&amp;self) -&gt; <a class=\"struct\" href=\"async_io/reactor/struct.Readable.html\" title=\"struct async_io::reactor::Readable\">Readable</a>&lt;'_, T&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Readable&lt;&#39;_, T&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Waits until the I/O handle is readable.</p>\n<p>This method completes when a read operation on this I/O handle wouldn’t block.</p>\n<h5 id=\"examples-3\"><a class=\"doc-anchor\" href=\"#examples-3\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>async_io::Async;\n<span class=\"kw\">use </span>std::net::TcpListener;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>listener = Async::&lt;TcpListener&gt;::bind(([<span class=\"number\">127</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>], <span class=\"number\">0</span>))<span class=\"question-mark\">?</span>;\n\n<span class=\"comment\">// Wait until a client can be accepted.\n</span>listener.readable().<span class=\"kw\">await</span><span class=\"question-mark\">?</span>;</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.readable_owned\" class=\"method\"><a class=\"src rightside\" href=\"src/async_io/lib.rs.html#855\">source</a><h4 class=\"code-header\">pub fn <a href=\"async_io/struct.Async.html#tymethod.readable_owned\" class=\"fn\">readable_owned</a>(self: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.77.0/alloc/sync/struct.Arc.html\" title=\"struct alloc::sync::Arc\">Arc</a>&lt;<a class=\"struct\" href=\"async_io/struct.Async.html\" title=\"struct async_io::Async\">Async</a>&lt;T&gt;&gt;) -&gt; <a class=\"struct\" href=\"async_io/reactor/struct.ReadableOwned.html\" title=\"struct async_io::reactor::ReadableOwned\">ReadableOwned</a>&lt;T&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"ReadableOwned&lt;T&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Waits until the I/O handle is readable.</p>\n<p>This method completes when a read operation on this I/O handle wouldn’t block.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.writable\" class=\"method\"><a class=\"src rightside\" href=\"src/async_io/lib.rs.html#877\">source</a><h4 class=\"code-header\">pub fn <a href=\"async_io/struct.Async.html#tymethod.writable\" class=\"fn\">writable</a>(&amp;self) -&gt; <a class=\"struct\" href=\"async_io/reactor/struct.Writable.html\" title=\"struct async_io::reactor::Writable\">Writable</a>&lt;'_, T&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Writable&lt;&#39;_, T&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Waits until the I/O handle is writable.</p>\n<p>This method completes when a write operation on this I/O handle wouldn’t block.</p>\n<h5 id=\"examples-4\"><a class=\"doc-anchor\" href=\"#examples-4\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>async_io::Async;\n<span class=\"kw\">use </span>std::net::{TcpStream, ToSocketAddrs};\n\n<span class=\"kw\">let </span>addr = <span class=\"string\">\"example.com:80\"</span>.to_socket_addrs()<span class=\"question-mark\">?</span>.next().unwrap();\n<span class=\"kw\">let </span>stream = Async::&lt;TcpStream&gt;::connect(addr).<span class=\"kw\">await</span><span class=\"question-mark\">?</span>;\n\n<span class=\"comment\">// Wait until the stream is writable.\n</span>stream.writable().<span class=\"kw\">await</span><span class=\"question-mark\">?</span>;</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.writable_owned\" class=\"method\"><a class=\"src rightside\" href=\"src/async_io/lib.rs.html#884\">source</a><h4 class=\"code-header\">pub fn <a href=\"async_io/struct.Async.html#tymethod.writable_owned\" class=\"fn\">writable_owned</a>(self: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.77.0/alloc/sync/struct.Arc.html\" title=\"struct alloc::sync::Arc\">Arc</a>&lt;<a class=\"struct\" href=\"async_io/struct.Async.html\" title=\"struct async_io::Async\">Async</a>&lt;T&gt;&gt;) -&gt; <a class=\"struct\" href=\"async_io/reactor/struct.WritableOwned.html\" title=\"struct async_io::reactor::WritableOwned\">WritableOwned</a>&lt;T&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"WritableOwned&lt;T&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Waits until the I/O handle is writable.</p>\n<p>This method completes when a write operation on this I/O handle wouldn’t block.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.poll_readable\" class=\"method\"><a class=\"src rightside\" href=\"src/async_io/lib.rs.html#915\">source</a><h4 class=\"code-header\">pub fn <a href=\"async_io/struct.Async.html#tymethod.poll_readable\" class=\"fn\">poll_readable</a>(&amp;self, cx: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.77.0/core/task/wake/struct.Context.html\" title=\"struct core::task::wake::Context\">Context</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.77.0/core/task/poll/enum.Poll.html\" title=\"enum core::task::poll::Poll\">Poll</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.77.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.77.0/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Polls the I/O handle for readability.</p>\n<p>When this method returns <a href=\"https://doc.rust-lang.org/1.77.0/core/task/poll/enum.Poll.html#variant.Ready\" title=\"variant core::task::poll::Poll::Ready\"><code>Poll::Ready</code></a>, that means the OS has delivered an event\nindicating readability since the last time this task has called the method and received\n<a href=\"https://doc.rust-lang.org/1.77.0/core/task/poll/enum.Poll.html#variant.Pending\" title=\"variant core::task::poll::Poll::Pending\"><code>Poll::Pending</code></a>.</p>\n<h5 id=\"caveats\"><a class=\"doc-anchor\" href=\"#caveats\">§</a>Caveats</h5>\n<p>Two different tasks should not call this method concurrently. Otherwise, conflicting tasks\nwill just keep waking each other in turn, thus wasting CPU time.</p>\n<p>Note that the <a href=\"futures_io/if_std/trait.AsyncRead.html\" title=\"trait futures_io::if_std::AsyncRead\"><code>AsyncRead</code></a> implementation for <a href=\"async_io/struct.Async.html\" title=\"struct async_io::Async\"><code>Async</code></a> also uses this method.</p>\n<h5 id=\"examples-5\"><a class=\"doc-anchor\" href=\"#examples-5\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>async_io::Async;\n<span class=\"kw\">use </span>futures_lite::future;\n<span class=\"kw\">use </span>std::net::TcpListener;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>listener = Async::&lt;TcpListener&gt;::bind(([<span class=\"number\">127</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>], <span class=\"number\">0</span>))<span class=\"question-mark\">?</span>;\n\n<span class=\"comment\">// Wait until a client can be accepted.\n</span>future::poll_fn(|cx| listener.poll_readable(cx)).<span class=\"kw\">await</span><span class=\"question-mark\">?</span>;</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.poll_writable\" class=\"method\"><a class=\"src rightside\" href=\"src/async_io/lib.rs.html#947\">source</a><h4 class=\"code-header\">pub fn <a href=\"async_io/struct.Async.html#tymethod.poll_writable\" class=\"fn\">poll_writable</a>(&amp;self, cx: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.77.0/core/task/wake/struct.Context.html\" title=\"struct core::task::wake::Context\">Context</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.77.0/core/task/poll/enum.Poll.html\" title=\"enum core::task::poll::Poll\">Poll</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.77.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.77.0/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Polls the I/O handle for writability.</p>\n<p>When this method returns <a href=\"https://doc.rust-lang.org/1.77.0/core/task/poll/enum.Poll.html#variant.Ready\" title=\"variant core::task::poll::Poll::Ready\"><code>Poll::Ready</code></a>, that means the OS has delivered an event\nindicating writability since the last time this task has called the method and received\n<a href=\"https://doc.rust-lang.org/1.77.0/core/task/poll/enum.Poll.html#variant.Pending\" title=\"variant core::task::poll::Poll::Pending\"><code>Poll::Pending</code></a>.</p>\n<h5 id=\"caveats-1\"><a class=\"doc-anchor\" href=\"#caveats-1\">§</a>Caveats</h5>\n<p>Two different tasks should not call this method concurrently. Otherwise, conflicting tasks\nwill just keep waking each other in turn, thus wasting CPU time.</p>\n<p>Note that the <a href=\"futures_io/if_std/trait.AsyncWrite.html\" title=\"trait futures_io::if_std::AsyncWrite\"><code>AsyncWrite</code></a> implementation for <a href=\"async_io/struct.Async.html\" title=\"struct async_io::Async\"><code>Async</code></a> also uses this method.</p>\n<h5 id=\"examples-6\"><a class=\"doc-anchor\" href=\"#examples-6\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>async_io::Async;\n<span class=\"kw\">use </span>futures_lite::future;\n<span class=\"kw\">use </span>std::net::{TcpStream, ToSocketAddrs};\n\n<span class=\"kw\">let </span>addr = <span class=\"string\">\"example.com:80\"</span>.to_socket_addrs()<span class=\"question-mark\">?</span>.next().unwrap();\n<span class=\"kw\">let </span>stream = Async::&lt;TcpStream&gt;::connect(addr).<span class=\"kw\">await</span><span class=\"question-mark\">?</span>;\n\n<span class=\"comment\">// Wait until the stream is writable.\n</span>future::poll_fn(|cx| stream.poll_writable(cx)).<span class=\"kw\">await</span><span class=\"question-mark\">?</span>;</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.read_with\" class=\"method\"><a class=\"src rightside\" href=\"src/async_io/lib.rs.html#973\">source</a><h4 class=\"code-header\">pub async fn <a href=\"async_io/struct.Async.html#tymethod.read_with\" class=\"fn\">read_with</a>&lt;R&gt;(\n    &amp;self,\n    op: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.77.0/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.0/std/primitive.reference.html\">&amp;T</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.77.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;R, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.77.0/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt;\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.77.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;R, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.77.0/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Performs a read operation asynchronously.</p>\n<p>The I/O handle is registered in the reactor and put in non-blocking mode. This method\ninvokes the <code>op</code> closure in a loop until it succeeds or returns an error other than\n<a href=\"https://doc.rust-lang.org/1.77.0/std/io/error/enum.ErrorKind.html#variant.WouldBlock\" title=\"variant std::io::error::ErrorKind::WouldBlock\"><code>io::ErrorKind::WouldBlock</code></a>. In between iterations of the loop, it waits until the OS\nsends a notification that the I/O handle is readable.</p>\n<p>The closure receives a shared reference to the I/O handle.</p>\n<h5 id=\"examples-7\"><a class=\"doc-anchor\" href=\"#examples-7\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>async_io::Async;\n<span class=\"kw\">use </span>std::net::TcpListener;\n\n<span class=\"kw\">let </span>listener = Async::&lt;TcpListener&gt;::bind(([<span class=\"number\">127</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>], <span class=\"number\">0</span>))<span class=\"question-mark\">?</span>;\n\n<span class=\"comment\">// Accept a new client asynchronously.\n</span><span class=\"kw\">let </span>(stream, addr) = listener.read_with(|l| l.accept()).<span class=\"kw\">await</span><span class=\"question-mark\">?</span>;</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.read_with_mut\" class=\"method\"><a class=\"src rightside\" href=\"src/async_io/lib.rs.html#1006-1009\">source</a><h4 class=\"code-header\">pub async fn <a href=\"async_io/struct.Async.html#tymethod.read_with_mut\" class=\"fn\">read_with_mut</a>&lt;R&gt;(\n    &amp;mut self,\n    op: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.77.0/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.0/std/primitive.reference.html\">&amp;mut T</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.77.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;R, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.77.0/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt;\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.77.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;R, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.77.0/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Performs a read operation asynchronously.</p>\n<p>The I/O handle is registered in the reactor and put in non-blocking mode. This method\ninvokes the <code>op</code> closure in a loop until it succeeds or returns an error other than\n<a href=\"https://doc.rust-lang.org/1.77.0/std/io/error/enum.ErrorKind.html#variant.WouldBlock\" title=\"variant std::io::error::ErrorKind::WouldBlock\"><code>io::ErrorKind::WouldBlock</code></a>. In between iterations of the loop, it waits until the OS\nsends a notification that the I/O handle is readable.</p>\n<p>The closure receives a mutable reference to the I/O handle.</p>\n<h5 id=\"examples-8\"><a class=\"doc-anchor\" href=\"#examples-8\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>async_io::Async;\n<span class=\"kw\">use </span>std::net::TcpListener;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>listener = Async::&lt;TcpListener&gt;::bind(([<span class=\"number\">127</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>], <span class=\"number\">0</span>))<span class=\"question-mark\">?</span>;\n\n<span class=\"comment\">// Accept a new client asynchronously.\n</span><span class=\"kw\">let </span>(stream, addr) = listener.read_with_mut(|l| l.accept()).<span class=\"kw\">await</span><span class=\"question-mark\">?</span>;</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.write_with\" class=\"method\"><a class=\"src rightside\" href=\"src/async_io/lib.rs.html#1043\">source</a><h4 class=\"code-header\">pub async fn <a href=\"async_io/struct.Async.html#tymethod.write_with\" class=\"fn\">write_with</a>&lt;R&gt;(\n    &amp;self,\n    op: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.77.0/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.0/std/primitive.reference.html\">&amp;T</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.77.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;R, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.77.0/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt;\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.77.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;R, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.77.0/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Performs a write operation asynchronously.</p>\n<p>The I/O handle is registered in the reactor and put in non-blocking mode. This method\ninvokes the <code>op</code> closure in a loop until it succeeds or returns an error other than\n<a href=\"https://doc.rust-lang.org/1.77.0/std/io/error/enum.ErrorKind.html#variant.WouldBlock\" title=\"variant std::io::error::ErrorKind::WouldBlock\"><code>io::ErrorKind::WouldBlock</code></a>. In between iterations of the loop, it waits until the OS\nsends a notification that the I/O handle is writable.</p>\n<p>The closure receives a shared reference to the I/O handle.</p>\n<h5 id=\"examples-9\"><a class=\"doc-anchor\" href=\"#examples-9\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>async_io::Async;\n<span class=\"kw\">use </span>std::net::UdpSocket;\n\n<span class=\"kw\">let </span>socket = Async::&lt;UdpSocket&gt;::bind(([<span class=\"number\">127</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>], <span class=\"number\">8000</span>))<span class=\"question-mark\">?</span>;\nsocket.get_ref().connect(<span class=\"string\">\"127.0.0.1:9000\"</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"kw\">let </span>msg = <span class=\"string\">b\"hello\"</span>;\n<span class=\"kw\">let </span>len = socket.write_with(|s| s.send(msg)).<span class=\"kw\">await</span><span class=\"question-mark\">?</span>;</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.write_with_mut\" class=\"method\"><a class=\"src rightside\" href=\"src/async_io/lib.rs.html#1077-1080\">source</a><h4 class=\"code-header\">pub async fn <a href=\"async_io/struct.Async.html#tymethod.write_with_mut\" class=\"fn\">write_with_mut</a>&lt;R&gt;(\n    &amp;mut self,\n    op: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.77.0/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.0/std/primitive.reference.html\">&amp;mut T</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.77.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;R, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.77.0/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt;\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.77.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;R, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.77.0/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Performs a write operation asynchronously.</p>\n<p>The I/O handle is registered in the reactor and put in non-blocking mode. This method\ninvokes the <code>op</code> closure in a loop until it succeeds or returns an error other than\n<a href=\"https://doc.rust-lang.org/1.77.0/std/io/error/enum.ErrorKind.html#variant.WouldBlock\" title=\"variant std::io::error::ErrorKind::WouldBlock\"><code>io::ErrorKind::WouldBlock</code></a>. In between iterations of the loop, it waits until the OS\nsends a notification that the I/O handle is writable.</p>\n<p>The closure receives a mutable reference to the I/O handle.</p>\n<h5 id=\"examples-10\"><a class=\"doc-anchor\" href=\"#examples-10\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>async_io::Async;\n<span class=\"kw\">use </span>std::net::UdpSocket;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>socket = Async::&lt;UdpSocket&gt;::bind(([<span class=\"number\">127</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>], <span class=\"number\">8000</span>))<span class=\"question-mark\">?</span>;\nsocket.get_ref().connect(<span class=\"string\">\"127.0.0.1:9000\"</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"kw\">let </span>msg = <span class=\"string\">b\"hello\"</span>;\n<span class=\"kw\">let </span>len = socket.write_with_mut(|s| s.send(msg)).<span class=\"kw\">await</span><span class=\"question-mark\">?</span>;</code></pre></div>\n</div></details></div></details>",0,"libp2p::tcp::async_io::TcpStream"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Async%3CTcpStream%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/async_io/lib.rs.html#1351\">source</a><a href=\"#impl-Async%3CTcpStream%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"struct\" href=\"async_io/struct.Async.html\" title=\"struct async_io::Async\">Async</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.77.0/std/net/tcp/struct.TcpStream.html\" title=\"struct std::net::tcp::TcpStream\">TcpStream</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.connect\" class=\"method\"><a class=\"src rightside\" href=\"src/async_io/lib.rs.html#1365\">source</a><h4 class=\"code-header\">pub async fn <a href=\"async_io/struct.Async.html#tymethod.connect\" class=\"fn\">connect</a>&lt;A&gt;(addr: A) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.77.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"async_io/struct.Async.html\" title=\"struct async_io::Async\">Async</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.77.0/std/net/tcp/struct.TcpStream.html\" title=\"struct std::net::tcp::TcpStream\">TcpStream</a>&gt;, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.77.0/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.77.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.77.0/core/net/socket_addr/enum.SocketAddr.html\" title=\"enum core::net::socket_addr::SocketAddr\">SocketAddr</a>&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Creates a TCP connection to the specified address.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>async_io::Async;\n<span class=\"kw\">use </span>std::net::{TcpStream, ToSocketAddrs};\n\n<span class=\"kw\">let </span>addr = <span class=\"string\">\"example.com:80\"</span>.to_socket_addrs()<span class=\"question-mark\">?</span>.next().unwrap();\n<span class=\"kw\">let </span>stream = Async::&lt;TcpStream&gt;::connect(addr).<span class=\"kw\">await</span><span class=\"question-mark\">?</span>;</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.peek\" class=\"method\"><a class=\"src rightside\" href=\"src/async_io/lib.rs.html#1405\">source</a><h4 class=\"code-header\">pub async fn <a href=\"async_io/struct.Async.html#tymethod.peek\" class=\"fn\">peek</a>(&amp;self, buf: &amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.0/std/primitive.u8.html\">u8</a>]) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.77.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.0/std/primitive.usize.html\">usize</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.77.0/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Reads data from the stream without removing it from the buffer.</p>\n<p>Returns the number of bytes read. Successive calls of this method read the same data.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>async_io::Async;\n<span class=\"kw\">use </span>futures_lite::{io::AsyncWriteExt, stream::StreamExt};\n<span class=\"kw\">use </span>std::net::{TcpStream, ToSocketAddrs};\n\n<span class=\"kw\">let </span>addr = <span class=\"string\">\"example.com:80\"</span>.to_socket_addrs()<span class=\"question-mark\">?</span>.next().unwrap();\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>stream = Async::&lt;TcpStream&gt;::connect(addr).<span class=\"kw\">await</span><span class=\"question-mark\">?</span>;\n\nstream\n    .write_all(<span class=\"string\">b\"GET / HTTP/1.1\\r\\nHost: example.com\\r\\n\\r\\n\"</span>)\n    .<span class=\"kw\">await</span><span class=\"question-mark\">?</span>;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>buf = [<span class=\"number\">0u8</span>; <span class=\"number\">1024</span>];\n<span class=\"kw\">let </span>len = stream.peek(<span class=\"kw-2\">&amp;mut </span>buf).<span class=\"kw\">await</span><span class=\"question-mark\">?</span>;</code></pre></div>\n</div></details></div></details>",0,"libp2p::tcp::async_io::TcpStream"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-Async%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/async_io/lib.rs.html#593\">source</a><a href=\"#impl-Debug-for-Async%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.77.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for <a class=\"struct\" href=\"async_io/struct.Async.html\" title=\"struct async_io::Async\">Async</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.77.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/async_io/lib.rs.html#593\">source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.77.0/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.77.0/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.77.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.77.0/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/1.77.0/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","libp2p::tcp::async_io::TcpStream"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsyncWrite-for-Async%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/async_io/lib.rs.html#1179\">source</a><a href=\"#impl-AsyncWrite-for-Async%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"futures_io/if_std/trait.AsyncWrite.html\" title=\"trait futures_io::if_std::AsyncWrite\">AsyncWrite</a> for <a class=\"struct\" href=\"async_io/struct.Async.html\" title=\"struct async_io::Async\">Async</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.77.0/std/io/trait.Write.html\" title=\"trait std::io::Write\">Write</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.poll_write\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/async_io/lib.rs.html#1180-1184\">source</a><a href=\"#method.poll_write\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"futures_io/if_std/trait.AsyncWrite.html#tymethod.poll_write\" class=\"fn\">poll_write</a>(\n    self: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.77.0/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;&amp;mut <a class=\"struct\" href=\"async_io/struct.Async.html\" title=\"struct async_io::Async\">Async</a>&lt;T&gt;&gt;,\n    cx: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.77.0/core/task/wake/struct.Context.html\" title=\"struct core::task::wake::Context\">Context</a>&lt;'_&gt;,\n    buf: &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.0/std/primitive.u8.html\">u8</a>]\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.77.0/core/task/poll/enum.Poll.html\" title=\"enum core::task::poll::Poll\">Poll</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.77.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.0/std/primitive.usize.html\">usize</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.77.0/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt;&gt;</h4></section></summary><div class='docblock'>Attempt to write bytes from <code>buf</code> into the object. <a href=\"futures_io/if_std/trait.AsyncWrite.html#tymethod.poll_write\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.poll_write_vectored\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/async_io/lib.rs.html#1194-1198\">source</a><a href=\"#method.poll_write_vectored\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"futures_io/if_std/trait.AsyncWrite.html#method.poll_write_vectored\" class=\"fn\">poll_write_vectored</a>(\n    self: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.77.0/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;&amp;mut <a class=\"struct\" href=\"async_io/struct.Async.html\" title=\"struct async_io::Async\">Async</a>&lt;T&gt;&gt;,\n    cx: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.77.0/core/task/wake/struct.Context.html\" title=\"struct core::task::wake::Context\">Context</a>&lt;'_&gt;,\n    bufs: &amp;[<a class=\"struct\" href=\"https://doc.rust-lang.org/1.77.0/std/io/struct.IoSlice.html\" title=\"struct std::io::IoSlice\">IoSlice</a>&lt;'_&gt;]\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.77.0/core/task/poll/enum.Poll.html\" title=\"enum core::task::poll::Poll\">Poll</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.77.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.0/std/primitive.usize.html\">usize</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.77.0/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt;&gt;</h4></section></summary><div class='docblock'>Attempt to write bytes from <code>bufs</code> into the object using vectored\nIO operations. <a href=\"futures_io/if_std/trait.AsyncWrite.html#method.poll_write_vectored\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.poll_flush\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/async_io/lib.rs.html#1208\">source</a><a href=\"#method.poll_flush\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"futures_io/if_std/trait.AsyncWrite.html#tymethod.poll_flush\" class=\"fn\">poll_flush</a>(\n    self: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.77.0/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;&amp;mut <a class=\"struct\" href=\"async_io/struct.Async.html\" title=\"struct async_io::Async\">Async</a>&lt;T&gt;&gt;,\n    cx: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.77.0/core/task/wake/struct.Context.html\" title=\"struct core::task::wake::Context\">Context</a>&lt;'_&gt;\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.77.0/core/task/poll/enum.Poll.html\" title=\"enum core::task::poll::Poll\">Poll</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.77.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.77.0/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt;&gt;</h4></section></summary><div class='docblock'>Attempt to flush the object, ensuring that any buffered data reach\ntheir destination. <a href=\"futures_io/if_std/trait.AsyncWrite.html#tymethod.poll_flush\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.poll_close\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/async_io/lib.rs.html#1218\">source</a><a href=\"#method.poll_close\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"futures_io/if_std/trait.AsyncWrite.html#tymethod.poll_close\" class=\"fn\">poll_close</a>(\n    self: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.77.0/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;&amp;mut <a class=\"struct\" href=\"async_io/struct.Async.html\" title=\"struct async_io::Async\">Async</a>&lt;T&gt;&gt;,\n    cx: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.77.0/core/task/wake/struct.Context.html\" title=\"struct core::task::wake::Context\">Context</a>&lt;'_&gt;\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.77.0/core/task/poll/enum.Poll.html\" title=\"enum core::task::poll::Poll\">Poll</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.77.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.77.0/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt;&gt;</h4></section></summary><div class='docblock'>Attempt to close the object. <a href=\"futures_io/if_std/trait.AsyncWrite.html#tymethod.poll_close\">Read more</a></div></details></div></details>","AsyncWrite","libp2p::tcp::async_io::TcpStream"],["<section id=\"impl-Unpin-for-Async%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/async_io/lib.rs.html#602\">source</a><a href=\"#impl-Unpin-for-Async%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.77.0/core/marker/trait.Unpin.html\" title=\"trait core::marker::Unpin\">Unpin</a> for <a class=\"struct\" href=\"async_io/struct.Async.html\" title=\"struct async_io::Async\">Async</a>&lt;T&gt;</h3></section>","Unpin","libp2p::tcp::async_io::TcpStream"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3CTcpStream%3E-for-Async%3CTcpStream%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/async_io/lib.rs.html#1410\">source</a><a href=\"#impl-TryFrom%3CTcpStream%3E-for-Async%3CTcpStream%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.77.0/core/convert/trait.TryFrom.html\" title=\"trait core::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.77.0/std/net/tcp/struct.TcpStream.html\" title=\"struct std::net::tcp::TcpStream\">TcpStream</a>&gt; for <a class=\"struct\" href=\"async_io/struct.Async.html\" title=\"struct async_io::Async\">Async</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.77.0/std/net/tcp/struct.TcpStream.html\" title=\"struct std::net::tcp::TcpStream\">TcpStream</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.77.0/core/convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"https://doc.rust-lang.org/1.77.0/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/async_io/lib.rs.html#1413\">source</a><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.77.0/core/convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(stream: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.77.0/std/net/tcp/struct.TcpStream.html\" title=\"struct std::net::tcp::TcpStream\">TcpStream</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.77.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"async_io/struct.Async.html\" title=\"struct async_io::Async\">Async</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.77.0/std/net/tcp/struct.TcpStream.html\" title=\"struct std::net::tcp::TcpStream\">TcpStream</a>&gt;, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.77.0/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Performs the conversion.</div></details></div></details>","TryFrom<TcpStream>","libp2p::tcp::async_io::TcpStream"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3COwnedFd%3E-for-Async%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/async_io/lib.rs.html#679\">source</a><a href=\"#impl-TryFrom%3COwnedFd%3E-for-Async%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.77.0/core/convert/trait.TryFrom.html\" title=\"trait core::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.77.0/std/os/fd/owned/struct.OwnedFd.html\" title=\"struct std::os::fd::owned::OwnedFd\">OwnedFd</a>&gt; for <a class=\"struct\" href=\"async_io/struct.Async.html\" title=\"struct async_io::Async\">Async</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.77.0/std/os/fd/raw/trait.AsRawFd.html\" title=\"trait std::os::fd::raw::AsRawFd\">AsRawFd</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.77.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.77.0/std/os/fd/owned/struct.OwnedFd.html\" title=\"struct std::os::fd::owned::OwnedFd\">OwnedFd</a>&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.77.0/core/convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"https://doc.rust-lang.org/1.77.0/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/async_io/lib.rs.html#682\">source</a><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.77.0/core/convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.77.0/std/os/fd/owned/struct.OwnedFd.html\" title=\"struct std::os::fd::owned::OwnedFd\">OwnedFd</a>\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.77.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"async_io/struct.Async.html\" title=\"struct async_io::Async\">Async</a>&lt;T&gt;, &lt;<a class=\"struct\" href=\"async_io/struct.Async.html\" title=\"struct async_io::Async\">Async</a>&lt;T&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.77.0/core/convert/trait.TryFrom.html\" title=\"trait core::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.77.0/std/os/fd/owned/struct.OwnedFd.html\" title=\"struct std::os::fd::owned::OwnedFd\">OwnedFd</a>&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.77.0/core/convert/trait.TryFrom.html#associatedtype.Error\" title=\"type core::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Performs the conversion.</div></details></div></details>","TryFrom<OwnedFd>","libp2p::tcp::async_io::TcpStream"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Drop-for-Async%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/async_io/lib.rs.html#1104\">source</a><a href=\"#impl-Drop-for-Async%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.77.0/core/ops/drop/trait.Drop.html\" title=\"trait core::ops::drop::Drop\">Drop</a> for <a class=\"struct\" href=\"async_io/struct.Async.html\" title=\"struct async_io::Async\">Async</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.drop\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/async_io/lib.rs.html#1105\">source</a><a href=\"#method.drop\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.77.0/core/ops/drop/trait.Drop.html#tymethod.drop\" class=\"fn\">drop</a>(&amp;mut self)</h4></section></summary><div class='docblock'>Executes the destructor for this type. <a href=\"https://doc.rust-lang.org/1.77.0/core/ops/drop/trait.Drop.html#tymethod.drop\">Read more</a></div></details></div></details>","Drop","libp2p::tcp::async_io::TcpStream"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsRef%3CT%3E-for-Async%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/async_io/lib.rs.html#1092\">source</a><a href=\"#impl-AsRef%3CT%3E-for-Async%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.77.0/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;T&gt; for <a class=\"struct\" href=\"async_io/struct.Async.html\" title=\"struct async_io::Async\">Async</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_ref\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/async_io/lib.rs.html#1093\">source</a><a href=\"#method.as_ref\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.77.0/core/convert/trait.AsRef.html#tymethod.as_ref\" class=\"fn\">as_ref</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.0/std/primitive.reference.html\">&amp;T</a></h4></section></summary><div class='docblock'>Converts this type into a shared reference of the (usually inferred) input type.</div></details></div></details>","AsRef<T>","libp2p::tcp::async_io::TcpStream"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsRawFd-for-Async%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/async_io/lib.rs.html#665\">source</a><a href=\"#impl-AsRawFd-for-Async%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.77.0/std/os/fd/raw/trait.AsRawFd.html\" title=\"trait std::os::fd::raw::AsRawFd\">AsRawFd</a> for <a class=\"struct\" href=\"async_io/struct.Async.html\" title=\"struct async_io::Async\">Async</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.77.0/std/os/fd/raw/trait.AsRawFd.html\" title=\"trait std::os::fd::raw::AsRawFd\">AsRawFd</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_raw_fd\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/async_io/lib.rs.html#666\">source</a><a href=\"#method.as_raw_fd\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.77.0/std/os/fd/raw/trait.AsRawFd.html#tymethod.as_raw_fd\" class=\"fn\">as_raw_fd</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.0/std/primitive.i32.html\">i32</a></h4></section></summary><div class='docblock'>Extracts the raw file descriptor. <a href=\"https://doc.rust-lang.org/1.77.0/std/os/fd/raw/trait.AsRawFd.html#tymethod.as_raw_fd\">Read more</a></div></details></div></details>","AsRawFd","libp2p::tcp::async_io::TcpStream"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsyncRead-for-Async%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/async_io/lib.rs.html#1116\">source</a><a href=\"#impl-AsyncRead-for-Async%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"futures_io/if_std/trait.AsyncRead.html\" title=\"trait futures_io::if_std::AsyncRead\">AsyncRead</a> for <a class=\"struct\" href=\"async_io/struct.Async.html\" title=\"struct async_io::Async\">Async</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.77.0/std/io/trait.Read.html\" title=\"trait std::io::Read\">Read</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.poll_read\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/async_io/lib.rs.html#1117-1121\">source</a><a href=\"#method.poll_read\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"futures_io/if_std/trait.AsyncRead.html#tymethod.poll_read\" class=\"fn\">poll_read</a>(\n    self: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.77.0/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;&amp;mut <a class=\"struct\" href=\"async_io/struct.Async.html\" title=\"struct async_io::Async\">Async</a>&lt;T&gt;&gt;,\n    cx: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.77.0/core/task/wake/struct.Context.html\" title=\"struct core::task::wake::Context\">Context</a>&lt;'_&gt;,\n    buf: &amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.0/std/primitive.u8.html\">u8</a>]\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.77.0/core/task/poll/enum.Poll.html\" title=\"enum core::task::poll::Poll\">Poll</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.77.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.0/std/primitive.usize.html\">usize</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.77.0/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt;&gt;</h4></section></summary><div class='docblock'>Attempt to read from the <code>AsyncRead</code> into <code>buf</code>. <a href=\"futures_io/if_std/trait.AsyncRead.html#tymethod.poll_read\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.poll_read_vectored\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/async_io/lib.rs.html#1131-1135\">source</a><a href=\"#method.poll_read_vectored\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"futures_io/if_std/trait.AsyncRead.html#method.poll_read_vectored\" class=\"fn\">poll_read_vectored</a>(\n    self: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.77.0/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;&amp;mut <a class=\"struct\" href=\"async_io/struct.Async.html\" title=\"struct async_io::Async\">Async</a>&lt;T&gt;&gt;,\n    cx: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.77.0/core/task/wake/struct.Context.html\" title=\"struct core::task::wake::Context\">Context</a>&lt;'_&gt;,\n    bufs: &amp;mut [<a class=\"struct\" href=\"https://doc.rust-lang.org/1.77.0/std/io/struct.IoSliceMut.html\" title=\"struct std::io::IoSliceMut\">IoSliceMut</a>&lt;'_&gt;]\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.77.0/core/task/poll/enum.Poll.html\" title=\"enum core::task::poll::Poll\">Poll</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.77.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.0/std/primitive.usize.html\">usize</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.77.0/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt;&gt;</h4></section></summary><div class='docblock'>Attempt to read from the <code>AsyncRead</code> into <code>bufs</code> using vectored\nIO operations. <a href=\"futures_io/if_std/trait.AsyncRead.html#method.poll_read_vectored\">Read more</a></div></details></div></details>","AsyncRead","libp2p::tcp::async_io::TcpStream"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsMut%3CT%3E-for-Async%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/async_io/lib.rs.html#1098\">source</a><a href=\"#impl-AsMut%3CT%3E-for-Async%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.77.0/core/convert/trait.AsMut.html\" title=\"trait core::convert::AsMut\">AsMut</a>&lt;T&gt; for <a class=\"struct\" href=\"async_io/struct.Async.html\" title=\"struct async_io::Async\">Async</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/async_io/lib.rs.html#1099\">source</a><a href=\"#method.as_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.77.0/core/convert/trait.AsMut.html#tymethod.as_mut\" class=\"fn\">as_mut</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.0/std/primitive.reference.html\">&amp;mut T</a></h4></section></summary><div class='docblock'>Converts this type into a mutable reference of the (usually inferred) input type.</div></details></div></details>","AsMut<T>","libp2p::tcp::async_io::TcpStream"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsFd-for-Async%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/async_io/lib.rs.html#672\">source</a><a href=\"#impl-AsFd-for-Async%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.77.0/std/os/fd/owned/trait.AsFd.html\" title=\"trait std::os::fd::owned::AsFd\">AsFd</a> for <a class=\"struct\" href=\"async_io/struct.Async.html\" title=\"struct async_io::Async\">Async</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.77.0/std/os/fd/owned/trait.AsFd.html\" title=\"trait std::os::fd::owned::AsFd\">AsFd</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_fd\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/async_io/lib.rs.html#673\">source</a><a href=\"#method.as_fd\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.77.0/std/os/fd/owned/trait.AsFd.html#tymethod.as_fd\" class=\"fn\">as_fd</a>(&amp;self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.77.0/std/os/fd/owned/struct.BorrowedFd.html\" title=\"struct std::os::fd::owned::BorrowedFd\">BorrowedFd</a>&lt;'_&gt;</h4></section></summary><div class='docblock'>Borrows the file descriptor. <a href=\"https://doc.rust-lang.org/1.77.0/std/os/fd/owned/trait.AsFd.html#tymethod.as_fd\">Read more</a></div></details></div></details>","AsFd","libp2p::tcp::async_io::TcpStream"]],
"libp2p_tcp":[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Async%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/async_io/lib.rs.html#605\">source</a><a href=\"#impl-Async%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"struct\" href=\"async_io/struct.Async.html\" title=\"struct async_io::Async\">Async</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.77.0/std/os/fd/raw/trait.AsRawFd.html\" title=\"trait std::os::fd::raw::AsRawFd\">AsRawFd</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.new\" class=\"method\"><a class=\"src rightside\" href=\"src/async_io/lib.rs.html#630\">source</a><h4 class=\"code-header\">pub fn <a href=\"async_io/struct.Async.html#tymethod.new\" class=\"fn\">new</a>(io: T) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.77.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"async_io/struct.Async.html\" title=\"struct async_io::Async\">Async</a>&lt;T&gt;, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.77.0/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Creates an async I/O handle.</p>\n<p>This method will put the handle in non-blocking mode and register it in\n<a href=\"https://en.wikipedia.org/wiki/Epoll\">epoll</a>/<a href=\"https://en.wikipedia.org/wiki/Kqueue\">kqueue</a>/<a href=\"https://illumos.org/man/port_create\">event ports</a>/<a href=\"https://learn.microsoft.com/en-us/windows/win32/fileio/i-o-completion-ports\">IOCP</a>.</p>\n<p>On Unix systems, the handle must implement <code>AsRawFd</code>, while on Windows it must implement\n<code>AsRawSocket</code>.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>async_io::Async;\n<span class=\"kw\">use </span>std::net::{SocketAddr, TcpListener};\n\n<span class=\"kw\">let </span>listener = TcpListener::bind(SocketAddr::from(([<span class=\"number\">127</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>], <span class=\"number\">0</span>)))<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>listener = Async::new(listener)<span class=\"question-mark\">?</span>;</code></pre></div>\n</div></details></div></details>",0,"libp2p_tcp::provider::async_io::TcpStream"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Async%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/async_io/lib.rs.html#772\">source</a><a href=\"#impl-Async%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"struct\" href=\"async_io/struct.Async.html\" title=\"struct async_io::Async\">Async</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_ref\" class=\"method\"><a class=\"src rightside\" href=\"src/async_io/lib.rs.html#786\">source</a><h4 class=\"code-header\">pub fn <a href=\"async_io/struct.Async.html#tymethod.get_ref\" class=\"fn\">get_ref</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.0/std/primitive.reference.html\">&amp;T</a></h4></section></summary><div class=\"docblock\"><p>Gets a reference to the inner I/O handle.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>async_io::Async;\n<span class=\"kw\">use </span>std::net::TcpListener;\n\n<span class=\"kw\">let </span>listener = Async::&lt;TcpListener&gt;::bind(([<span class=\"number\">127</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>], <span class=\"number\">0</span>))<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>inner = listener.get_ref();</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_mut\" class=\"method\"><a class=\"src rightside\" href=\"src/async_io/lib.rs.html#803\">source</a><h4 class=\"code-header\">pub fn <a href=\"async_io/struct.Async.html#tymethod.get_mut\" class=\"fn\">get_mut</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.0/std/primitive.reference.html\">&amp;mut T</a></h4></section></summary><div class=\"docblock\"><p>Gets a mutable reference to the inner I/O handle.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>async_io::Async;\n<span class=\"kw\">use </span>std::net::TcpListener;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>listener = Async::&lt;TcpListener&gt;::bind(([<span class=\"number\">127</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>], <span class=\"number\">0</span>))<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>inner = listener.get_mut();</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_inner\" class=\"method\"><a class=\"src rightside\" href=\"src/async_io/lib.rs.html#825\">source</a><h4 class=\"code-header\">pub fn <a href=\"async_io/struct.Async.html#tymethod.into_inner\" class=\"fn\">into_inner</a>(self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.77.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;T, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.77.0/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Unwraps the inner I/O handle.</p>\n<p>This method will <strong>not</strong> put the I/O handle back into blocking mode.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>async_io::Async;\n<span class=\"kw\">use </span>std::net::TcpListener;\n\n<span class=\"kw\">let </span>listener = Async::&lt;TcpListener&gt;::bind(([<span class=\"number\">127</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>], <span class=\"number\">0</span>))<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>inner = listener.into_inner()<span class=\"question-mark\">?</span>;\n\n<span class=\"comment\">// Put the listener back into blocking mode.\n</span>inner.set_nonblocking(<span class=\"bool-val\">false</span>)<span class=\"question-mark\">?</span>;</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.readable\" class=\"method\"><a class=\"src rightside\" href=\"src/async_io/lib.rs.html#848\">source</a><h4 class=\"code-header\">pub fn <a href=\"async_io/struct.Async.html#tymethod.readable\" class=\"fn\">readable</a>(&amp;self) -&gt; <a class=\"struct\" href=\"async_io/reactor/struct.Readable.html\" title=\"struct async_io::reactor::Readable\">Readable</a>&lt;'_, T&gt;</h4></section></summary><div class=\"docblock\"><p>Waits until the I/O handle is readable.</p>\n<p>This method completes when a read operation on this I/O handle wouldn’t block.</p>\n<h5 id=\"examples-3\"><a class=\"doc-anchor\" href=\"#examples-3\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>async_io::Async;\n<span class=\"kw\">use </span>std::net::TcpListener;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>listener = Async::&lt;TcpListener&gt;::bind(([<span class=\"number\">127</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>], <span class=\"number\">0</span>))<span class=\"question-mark\">?</span>;\n\n<span class=\"comment\">// Wait until a client can be accepted.\n</span>listener.readable().<span class=\"kw\">await</span><span class=\"question-mark\">?</span>;</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.readable_owned\" class=\"method\"><a class=\"src rightside\" href=\"src/async_io/lib.rs.html#855\">source</a><h4 class=\"code-header\">pub fn <a href=\"async_io/struct.Async.html#tymethod.readable_owned\" class=\"fn\">readable_owned</a>(self: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.77.0/alloc/sync/struct.Arc.html\" title=\"struct alloc::sync::Arc\">Arc</a>&lt;<a class=\"struct\" href=\"async_io/struct.Async.html\" title=\"struct async_io::Async\">Async</a>&lt;T&gt;&gt;) -&gt; <a class=\"struct\" href=\"async_io/reactor/struct.ReadableOwned.html\" title=\"struct async_io::reactor::ReadableOwned\">ReadableOwned</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Waits until the I/O handle is readable.</p>\n<p>This method completes when a read operation on this I/O handle wouldn’t block.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.writable\" class=\"method\"><a class=\"src rightside\" href=\"src/async_io/lib.rs.html#877\">source</a><h4 class=\"code-header\">pub fn <a href=\"async_io/struct.Async.html#tymethod.writable\" class=\"fn\">writable</a>(&amp;self) -&gt; <a class=\"struct\" href=\"async_io/reactor/struct.Writable.html\" title=\"struct async_io::reactor::Writable\">Writable</a>&lt;'_, T&gt;</h4></section></summary><div class=\"docblock\"><p>Waits until the I/O handle is writable.</p>\n<p>This method completes when a write operation on this I/O handle wouldn’t block.</p>\n<h5 id=\"examples-4\"><a class=\"doc-anchor\" href=\"#examples-4\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>async_io::Async;\n<span class=\"kw\">use </span>std::net::{TcpStream, ToSocketAddrs};\n\n<span class=\"kw\">let </span>addr = <span class=\"string\">\"example.com:80\"</span>.to_socket_addrs()<span class=\"question-mark\">?</span>.next().unwrap();\n<span class=\"kw\">let </span>stream = Async::&lt;TcpStream&gt;::connect(addr).<span class=\"kw\">await</span><span class=\"question-mark\">?</span>;\n\n<span class=\"comment\">// Wait until the stream is writable.\n</span>stream.writable().<span class=\"kw\">await</span><span class=\"question-mark\">?</span>;</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.writable_owned\" class=\"method\"><a class=\"src rightside\" href=\"src/async_io/lib.rs.html#884\">source</a><h4 class=\"code-header\">pub fn <a href=\"async_io/struct.Async.html#tymethod.writable_owned\" class=\"fn\">writable_owned</a>(self: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.77.0/alloc/sync/struct.Arc.html\" title=\"struct alloc::sync::Arc\">Arc</a>&lt;<a class=\"struct\" href=\"async_io/struct.Async.html\" title=\"struct async_io::Async\">Async</a>&lt;T&gt;&gt;) -&gt; <a class=\"struct\" href=\"async_io/reactor/struct.WritableOwned.html\" title=\"struct async_io::reactor::WritableOwned\">WritableOwned</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Waits until the I/O handle is writable.</p>\n<p>This method completes when a write operation on this I/O handle wouldn’t block.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.poll_readable\" class=\"method\"><a class=\"src rightside\" href=\"src/async_io/lib.rs.html#915\">source</a><h4 class=\"code-header\">pub fn <a href=\"async_io/struct.Async.html#tymethod.poll_readable\" class=\"fn\">poll_readable</a>(&amp;self, cx: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.77.0/core/task/wake/struct.Context.html\" title=\"struct core::task::wake::Context\">Context</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.77.0/core/task/poll/enum.Poll.html\" title=\"enum core::task::poll::Poll\">Poll</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.77.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.77.0/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Polls the I/O handle for readability.</p>\n<p>When this method returns <a href=\"https://doc.rust-lang.org/1.77.0/core/task/poll/enum.Poll.html#variant.Ready\" title=\"variant core::task::poll::Poll::Ready\"><code>Poll::Ready</code></a>, that means the OS has delivered an event\nindicating readability since the last time this task has called the method and received\n<a href=\"https://doc.rust-lang.org/1.77.0/core/task/poll/enum.Poll.html#variant.Pending\" title=\"variant core::task::poll::Poll::Pending\"><code>Poll::Pending</code></a>.</p>\n<h5 id=\"caveats\"><a class=\"doc-anchor\" href=\"#caveats\">§</a>Caveats</h5>\n<p>Two different tasks should not call this method concurrently. Otherwise, conflicting tasks\nwill just keep waking each other in turn, thus wasting CPU time.</p>\n<p>Note that the <a href=\"futures_io/if_std/trait.AsyncRead.html\" title=\"trait futures_io::if_std::AsyncRead\"><code>AsyncRead</code></a> implementation for <a href=\"async_io/struct.Async.html\" title=\"struct async_io::Async\"><code>Async</code></a> also uses this method.</p>\n<h5 id=\"examples-5\"><a class=\"doc-anchor\" href=\"#examples-5\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>async_io::Async;\n<span class=\"kw\">use </span>futures_lite::future;\n<span class=\"kw\">use </span>std::net::TcpListener;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>listener = Async::&lt;TcpListener&gt;::bind(([<span class=\"number\">127</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>], <span class=\"number\">0</span>))<span class=\"question-mark\">?</span>;\n\n<span class=\"comment\">// Wait until a client can be accepted.\n</span>future::poll_fn(|cx| listener.poll_readable(cx)).<span class=\"kw\">await</span><span class=\"question-mark\">?</span>;</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.poll_writable\" class=\"method\"><a class=\"src rightside\" href=\"src/async_io/lib.rs.html#947\">source</a><h4 class=\"code-header\">pub fn <a href=\"async_io/struct.Async.html#tymethod.poll_writable\" class=\"fn\">poll_writable</a>(&amp;self, cx: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.77.0/core/task/wake/struct.Context.html\" title=\"struct core::task::wake::Context\">Context</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.77.0/core/task/poll/enum.Poll.html\" title=\"enum core::task::poll::Poll\">Poll</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.77.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.77.0/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Polls the I/O handle for writability.</p>\n<p>When this method returns <a href=\"https://doc.rust-lang.org/1.77.0/core/task/poll/enum.Poll.html#variant.Ready\" title=\"variant core::task::poll::Poll::Ready\"><code>Poll::Ready</code></a>, that means the OS has delivered an event\nindicating writability since the last time this task has called the method and received\n<a href=\"https://doc.rust-lang.org/1.77.0/core/task/poll/enum.Poll.html#variant.Pending\" title=\"variant core::task::poll::Poll::Pending\"><code>Poll::Pending</code></a>.</p>\n<h5 id=\"caveats-1\"><a class=\"doc-anchor\" href=\"#caveats-1\">§</a>Caveats</h5>\n<p>Two different tasks should not call this method concurrently. Otherwise, conflicting tasks\nwill just keep waking each other in turn, thus wasting CPU time.</p>\n<p>Note that the <a href=\"futures_io/if_std/trait.AsyncWrite.html\" title=\"trait futures_io::if_std::AsyncWrite\"><code>AsyncWrite</code></a> implementation for <a href=\"async_io/struct.Async.html\" title=\"struct async_io::Async\"><code>Async</code></a> also uses this method.</p>\n<h5 id=\"examples-6\"><a class=\"doc-anchor\" href=\"#examples-6\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>async_io::Async;\n<span class=\"kw\">use </span>futures_lite::future;\n<span class=\"kw\">use </span>std::net::{TcpStream, ToSocketAddrs};\n\n<span class=\"kw\">let </span>addr = <span class=\"string\">\"example.com:80\"</span>.to_socket_addrs()<span class=\"question-mark\">?</span>.next().unwrap();\n<span class=\"kw\">let </span>stream = Async::&lt;TcpStream&gt;::connect(addr).<span class=\"kw\">await</span><span class=\"question-mark\">?</span>;\n\n<span class=\"comment\">// Wait until the stream is writable.\n</span>future::poll_fn(|cx| stream.poll_writable(cx)).<span class=\"kw\">await</span><span class=\"question-mark\">?</span>;</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.read_with\" class=\"method\"><a class=\"src rightside\" href=\"src/async_io/lib.rs.html#973\">source</a><h4 class=\"code-header\">pub async fn <a href=\"async_io/struct.Async.html#tymethod.read_with\" class=\"fn\">read_with</a>&lt;R&gt;(\n    &amp;self,\n    op: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.77.0/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.0/std/primitive.reference.html\">&amp;T</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.77.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;R, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.77.0/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt;\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.77.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;R, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.77.0/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Performs a read operation asynchronously.</p>\n<p>The I/O handle is registered in the reactor and put in non-blocking mode. This method\ninvokes the <code>op</code> closure in a loop until it succeeds or returns an error other than\n<a href=\"https://doc.rust-lang.org/1.77.0/std/io/error/enum.ErrorKind.html#variant.WouldBlock\" title=\"variant std::io::error::ErrorKind::WouldBlock\"><code>io::ErrorKind::WouldBlock</code></a>. In between iterations of the loop, it waits until the OS\nsends a notification that the I/O handle is readable.</p>\n<p>The closure receives a shared reference to the I/O handle.</p>\n<h5 id=\"examples-7\"><a class=\"doc-anchor\" href=\"#examples-7\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>async_io::Async;\n<span class=\"kw\">use </span>std::net::TcpListener;\n\n<span class=\"kw\">let </span>listener = Async::&lt;TcpListener&gt;::bind(([<span class=\"number\">127</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>], <span class=\"number\">0</span>))<span class=\"question-mark\">?</span>;\n\n<span class=\"comment\">// Accept a new client asynchronously.\n</span><span class=\"kw\">let </span>(stream, addr) = listener.read_with(|l| l.accept()).<span class=\"kw\">await</span><span class=\"question-mark\">?</span>;</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.read_with_mut\" class=\"method\"><a class=\"src rightside\" href=\"src/async_io/lib.rs.html#1006-1009\">source</a><h4 class=\"code-header\">pub async fn <a href=\"async_io/struct.Async.html#tymethod.read_with_mut\" class=\"fn\">read_with_mut</a>&lt;R&gt;(\n    &amp;mut self,\n    op: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.77.0/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.0/std/primitive.reference.html\">&amp;mut T</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.77.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;R, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.77.0/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt;\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.77.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;R, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.77.0/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Performs a read operation asynchronously.</p>\n<p>The I/O handle is registered in the reactor and put in non-blocking mode. This method\ninvokes the <code>op</code> closure in a loop until it succeeds or returns an error other than\n<a href=\"https://doc.rust-lang.org/1.77.0/std/io/error/enum.ErrorKind.html#variant.WouldBlock\" title=\"variant std::io::error::ErrorKind::WouldBlock\"><code>io::ErrorKind::WouldBlock</code></a>. In between iterations of the loop, it waits until the OS\nsends a notification that the I/O handle is readable.</p>\n<p>The closure receives a mutable reference to the I/O handle.</p>\n<h5 id=\"examples-8\"><a class=\"doc-anchor\" href=\"#examples-8\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>async_io::Async;\n<span class=\"kw\">use </span>std::net::TcpListener;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>listener = Async::&lt;TcpListener&gt;::bind(([<span class=\"number\">127</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>], <span class=\"number\">0</span>))<span class=\"question-mark\">?</span>;\n\n<span class=\"comment\">// Accept a new client asynchronously.\n</span><span class=\"kw\">let </span>(stream, addr) = listener.read_with_mut(|l| l.accept()).<span class=\"kw\">await</span><span class=\"question-mark\">?</span>;</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.write_with\" class=\"method\"><a class=\"src rightside\" href=\"src/async_io/lib.rs.html#1043\">source</a><h4 class=\"code-header\">pub async fn <a href=\"async_io/struct.Async.html#tymethod.write_with\" class=\"fn\">write_with</a>&lt;R&gt;(\n    &amp;self,\n    op: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.77.0/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.0/std/primitive.reference.html\">&amp;T</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.77.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;R, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.77.0/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt;\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.77.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;R, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.77.0/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Performs a write operation asynchronously.</p>\n<p>The I/O handle is registered in the reactor and put in non-blocking mode. This method\ninvokes the <code>op</code> closure in a loop until it succeeds or returns an error other than\n<a href=\"https://doc.rust-lang.org/1.77.0/std/io/error/enum.ErrorKind.html#variant.WouldBlock\" title=\"variant std::io::error::ErrorKind::WouldBlock\"><code>io::ErrorKind::WouldBlock</code></a>. In between iterations of the loop, it waits until the OS\nsends a notification that the I/O handle is writable.</p>\n<p>The closure receives a shared reference to the I/O handle.</p>\n<h5 id=\"examples-9\"><a class=\"doc-anchor\" href=\"#examples-9\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>async_io::Async;\n<span class=\"kw\">use </span>std::net::UdpSocket;\n\n<span class=\"kw\">let </span>socket = Async::&lt;UdpSocket&gt;::bind(([<span class=\"number\">127</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>], <span class=\"number\">8000</span>))<span class=\"question-mark\">?</span>;\nsocket.get_ref().connect(<span class=\"string\">\"127.0.0.1:9000\"</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"kw\">let </span>msg = <span class=\"string\">b\"hello\"</span>;\n<span class=\"kw\">let </span>len = socket.write_with(|s| s.send(msg)).<span class=\"kw\">await</span><span class=\"question-mark\">?</span>;</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.write_with_mut\" class=\"method\"><a class=\"src rightside\" href=\"src/async_io/lib.rs.html#1077-1080\">source</a><h4 class=\"code-header\">pub async fn <a href=\"async_io/struct.Async.html#tymethod.write_with_mut\" class=\"fn\">write_with_mut</a>&lt;R&gt;(\n    &amp;mut self,\n    op: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.77.0/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.0/std/primitive.reference.html\">&amp;mut T</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.77.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;R, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.77.0/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt;\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.77.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;R, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.77.0/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Performs a write operation asynchronously.</p>\n<p>The I/O handle is registered in the reactor and put in non-blocking mode. This method\ninvokes the <code>op</code> closure in a loop until it succeeds or returns an error other than\n<a href=\"https://doc.rust-lang.org/1.77.0/std/io/error/enum.ErrorKind.html#variant.WouldBlock\" title=\"variant std::io::error::ErrorKind::WouldBlock\"><code>io::ErrorKind::WouldBlock</code></a>. In between iterations of the loop, it waits until the OS\nsends a notification that the I/O handle is writable.</p>\n<p>The closure receives a mutable reference to the I/O handle.</p>\n<h5 id=\"examples-10\"><a class=\"doc-anchor\" href=\"#examples-10\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>async_io::Async;\n<span class=\"kw\">use </span>std::net::UdpSocket;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>socket = Async::&lt;UdpSocket&gt;::bind(([<span class=\"number\">127</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>], <span class=\"number\">8000</span>))<span class=\"question-mark\">?</span>;\nsocket.get_ref().connect(<span class=\"string\">\"127.0.0.1:9000\"</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"kw\">let </span>msg = <span class=\"string\">b\"hello\"</span>;\n<span class=\"kw\">let </span>len = socket.write_with_mut(|s| s.send(msg)).<span class=\"kw\">await</span><span class=\"question-mark\">?</span>;</code></pre></div>\n</div></details></div></details>",0,"libp2p_tcp::provider::async_io::TcpStream"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Async%3CTcpStream%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/async_io/lib.rs.html#1351\">source</a><a href=\"#impl-Async%3CTcpStream%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"struct\" href=\"async_io/struct.Async.html\" title=\"struct async_io::Async\">Async</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.77.0/std/net/tcp/struct.TcpStream.html\" title=\"struct std::net::tcp::TcpStream\">TcpStream</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.connect\" class=\"method\"><a class=\"src rightside\" href=\"src/async_io/lib.rs.html#1365\">source</a><h4 class=\"code-header\">pub async fn <a href=\"async_io/struct.Async.html#tymethod.connect\" class=\"fn\">connect</a>&lt;A&gt;(addr: A) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.77.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"async_io/struct.Async.html\" title=\"struct async_io::Async\">Async</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.77.0/std/net/tcp/struct.TcpStream.html\" title=\"struct std::net::tcp::TcpStream\">TcpStream</a>&gt;, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.77.0/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.77.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.77.0/core/net/socket_addr/enum.SocketAddr.html\" title=\"enum core::net::socket_addr::SocketAddr\">SocketAddr</a>&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Creates a TCP connection to the specified address.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>async_io::Async;\n<span class=\"kw\">use </span>std::net::{TcpStream, ToSocketAddrs};\n\n<span class=\"kw\">let </span>addr = <span class=\"string\">\"example.com:80\"</span>.to_socket_addrs()<span class=\"question-mark\">?</span>.next().unwrap();\n<span class=\"kw\">let </span>stream = Async::&lt;TcpStream&gt;::connect(addr).<span class=\"kw\">await</span><span class=\"question-mark\">?</span>;</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.peek\" class=\"method\"><a class=\"src rightside\" href=\"src/async_io/lib.rs.html#1405\">source</a><h4 class=\"code-header\">pub async fn <a href=\"async_io/struct.Async.html#tymethod.peek\" class=\"fn\">peek</a>(&amp;self, buf: &amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.0/std/primitive.u8.html\">u8</a>]) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.77.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.0/std/primitive.usize.html\">usize</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.77.0/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Reads data from the stream without removing it from the buffer.</p>\n<p>Returns the number of bytes read. Successive calls of this method read the same data.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>async_io::Async;\n<span class=\"kw\">use </span>futures_lite::{io::AsyncWriteExt, stream::StreamExt};\n<span class=\"kw\">use </span>std::net::{TcpStream, ToSocketAddrs};\n\n<span class=\"kw\">let </span>addr = <span class=\"string\">\"example.com:80\"</span>.to_socket_addrs()<span class=\"question-mark\">?</span>.next().unwrap();\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>stream = Async::&lt;TcpStream&gt;::connect(addr).<span class=\"kw\">await</span><span class=\"question-mark\">?</span>;\n\nstream\n    .write_all(<span class=\"string\">b\"GET / HTTP/1.1\\r\\nHost: example.com\\r\\n\\r\\n\"</span>)\n    .<span class=\"kw\">await</span><span class=\"question-mark\">?</span>;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>buf = [<span class=\"number\">0u8</span>; <span class=\"number\">1024</span>];\n<span class=\"kw\">let </span>len = stream.peek(<span class=\"kw-2\">&amp;mut </span>buf).<span class=\"kw\">await</span><span class=\"question-mark\">?</span>;</code></pre></div>\n</div></details></div></details>",0,"libp2p_tcp::provider::async_io::TcpStream"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-Async%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/async_io/lib.rs.html#593\">source</a><a href=\"#impl-Debug-for-Async%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.77.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for <a class=\"struct\" href=\"async_io/struct.Async.html\" title=\"struct async_io::Async\">Async</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.77.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/async_io/lib.rs.html#593\">source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.77.0/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.77.0/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.77.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.77.0/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/1.77.0/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","libp2p_tcp::provider::async_io::TcpStream"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsyncWrite-for-Async%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/async_io/lib.rs.html#1179\">source</a><a href=\"#impl-AsyncWrite-for-Async%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"futures_io/if_std/trait.AsyncWrite.html\" title=\"trait futures_io::if_std::AsyncWrite\">AsyncWrite</a> for <a class=\"struct\" href=\"async_io/struct.Async.html\" title=\"struct async_io::Async\">Async</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.77.0/std/io/trait.Write.html\" title=\"trait std::io::Write\">Write</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.poll_write\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/async_io/lib.rs.html#1180-1184\">source</a><a href=\"#method.poll_write\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"futures_io/if_std/trait.AsyncWrite.html#tymethod.poll_write\" class=\"fn\">poll_write</a>(\n    self: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.77.0/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;&amp;mut <a class=\"struct\" href=\"async_io/struct.Async.html\" title=\"struct async_io::Async\">Async</a>&lt;T&gt;&gt;,\n    cx: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.77.0/core/task/wake/struct.Context.html\" title=\"struct core::task::wake::Context\">Context</a>&lt;'_&gt;,\n    buf: &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.0/std/primitive.u8.html\">u8</a>]\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.77.0/core/task/poll/enum.Poll.html\" title=\"enum core::task::poll::Poll\">Poll</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.77.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.0/std/primitive.usize.html\">usize</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.77.0/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt;&gt;</h4></section></summary><div class='docblock'>Attempt to write bytes from <code>buf</code> into the object. <a href=\"futures_io/if_std/trait.AsyncWrite.html#tymethod.poll_write\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.poll_write_vectored\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/async_io/lib.rs.html#1194-1198\">source</a><a href=\"#method.poll_write_vectored\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"futures_io/if_std/trait.AsyncWrite.html#method.poll_write_vectored\" class=\"fn\">poll_write_vectored</a>(\n    self: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.77.0/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;&amp;mut <a class=\"struct\" href=\"async_io/struct.Async.html\" title=\"struct async_io::Async\">Async</a>&lt;T&gt;&gt;,\n    cx: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.77.0/core/task/wake/struct.Context.html\" title=\"struct core::task::wake::Context\">Context</a>&lt;'_&gt;,\n    bufs: &amp;[<a class=\"struct\" href=\"https://doc.rust-lang.org/1.77.0/std/io/struct.IoSlice.html\" title=\"struct std::io::IoSlice\">IoSlice</a>&lt;'_&gt;]\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.77.0/core/task/poll/enum.Poll.html\" title=\"enum core::task::poll::Poll\">Poll</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.77.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.0/std/primitive.usize.html\">usize</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.77.0/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt;&gt;</h4></section></summary><div class='docblock'>Attempt to write bytes from <code>bufs</code> into the object using vectored\nIO operations. <a href=\"futures_io/if_std/trait.AsyncWrite.html#method.poll_write_vectored\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.poll_flush\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/async_io/lib.rs.html#1208\">source</a><a href=\"#method.poll_flush\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"futures_io/if_std/trait.AsyncWrite.html#tymethod.poll_flush\" class=\"fn\">poll_flush</a>(\n    self: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.77.0/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;&amp;mut <a class=\"struct\" href=\"async_io/struct.Async.html\" title=\"struct async_io::Async\">Async</a>&lt;T&gt;&gt;,\n    cx: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.77.0/core/task/wake/struct.Context.html\" title=\"struct core::task::wake::Context\">Context</a>&lt;'_&gt;\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.77.0/core/task/poll/enum.Poll.html\" title=\"enum core::task::poll::Poll\">Poll</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.77.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.77.0/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt;&gt;</h4></section></summary><div class='docblock'>Attempt to flush the object, ensuring that any buffered data reach\ntheir destination. <a href=\"futures_io/if_std/trait.AsyncWrite.html#tymethod.poll_flush\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.poll_close\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/async_io/lib.rs.html#1218\">source</a><a href=\"#method.poll_close\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"futures_io/if_std/trait.AsyncWrite.html#tymethod.poll_close\" class=\"fn\">poll_close</a>(\n    self: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.77.0/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;&amp;mut <a class=\"struct\" href=\"async_io/struct.Async.html\" title=\"struct async_io::Async\">Async</a>&lt;T&gt;&gt;,\n    cx: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.77.0/core/task/wake/struct.Context.html\" title=\"struct core::task::wake::Context\">Context</a>&lt;'_&gt;\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.77.0/core/task/poll/enum.Poll.html\" title=\"enum core::task::poll::Poll\">Poll</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.77.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.77.0/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt;&gt;</h4></section></summary><div class='docblock'>Attempt to close the object. <a href=\"futures_io/if_std/trait.AsyncWrite.html#tymethod.poll_close\">Read more</a></div></details></div></details>","AsyncWrite","libp2p_tcp::provider::async_io::TcpStream"],["<section id=\"impl-Unpin-for-Async%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/async_io/lib.rs.html#602\">source</a><a href=\"#impl-Unpin-for-Async%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.77.0/core/marker/trait.Unpin.html\" title=\"trait core::marker::Unpin\">Unpin</a> for <a class=\"struct\" href=\"async_io/struct.Async.html\" title=\"struct async_io::Async\">Async</a>&lt;T&gt;</h3></section>","Unpin","libp2p_tcp::provider::async_io::TcpStream"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3CTcpStream%3E-for-Async%3CTcpStream%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/async_io/lib.rs.html#1410\">source</a><a href=\"#impl-TryFrom%3CTcpStream%3E-for-Async%3CTcpStream%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.77.0/core/convert/trait.TryFrom.html\" title=\"trait core::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.77.0/std/net/tcp/struct.TcpStream.html\" title=\"struct std::net::tcp::TcpStream\">TcpStream</a>&gt; for <a class=\"struct\" href=\"async_io/struct.Async.html\" title=\"struct async_io::Async\">Async</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.77.0/std/net/tcp/struct.TcpStream.html\" title=\"struct std::net::tcp::TcpStream\">TcpStream</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.77.0/core/convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"https://doc.rust-lang.org/1.77.0/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/async_io/lib.rs.html#1413\">source</a><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.77.0/core/convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(stream: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.77.0/std/net/tcp/struct.TcpStream.html\" title=\"struct std::net::tcp::TcpStream\">TcpStream</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.77.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"async_io/struct.Async.html\" title=\"struct async_io::Async\">Async</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.77.0/std/net/tcp/struct.TcpStream.html\" title=\"struct std::net::tcp::TcpStream\">TcpStream</a>&gt;, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.77.0/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Performs the conversion.</div></details></div></details>","TryFrom<TcpStream>","libp2p_tcp::provider::async_io::TcpStream"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3COwnedFd%3E-for-Async%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/async_io/lib.rs.html#679\">source</a><a href=\"#impl-TryFrom%3COwnedFd%3E-for-Async%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.77.0/core/convert/trait.TryFrom.html\" title=\"trait core::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.77.0/std/os/fd/owned/struct.OwnedFd.html\" title=\"struct std::os::fd::owned::OwnedFd\">OwnedFd</a>&gt; for <a class=\"struct\" href=\"async_io/struct.Async.html\" title=\"struct async_io::Async\">Async</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.77.0/std/os/fd/raw/trait.AsRawFd.html\" title=\"trait std::os::fd::raw::AsRawFd\">AsRawFd</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.77.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.77.0/std/os/fd/owned/struct.OwnedFd.html\" title=\"struct std::os::fd::owned::OwnedFd\">OwnedFd</a>&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.77.0/core/convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"https://doc.rust-lang.org/1.77.0/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/async_io/lib.rs.html#682\">source</a><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.77.0/core/convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.77.0/std/os/fd/owned/struct.OwnedFd.html\" title=\"struct std::os::fd::owned::OwnedFd\">OwnedFd</a>\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.77.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"async_io/struct.Async.html\" title=\"struct async_io::Async\">Async</a>&lt;T&gt;, &lt;<a class=\"struct\" href=\"async_io/struct.Async.html\" title=\"struct async_io::Async\">Async</a>&lt;T&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.77.0/core/convert/trait.TryFrom.html\" title=\"trait core::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.77.0/std/os/fd/owned/struct.OwnedFd.html\" title=\"struct std::os::fd::owned::OwnedFd\">OwnedFd</a>&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.77.0/core/convert/trait.TryFrom.html#associatedtype.Error\" title=\"type core::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Performs the conversion.</div></details></div></details>","TryFrom<OwnedFd>","libp2p_tcp::provider::async_io::TcpStream"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Drop-for-Async%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/async_io/lib.rs.html#1104\">source</a><a href=\"#impl-Drop-for-Async%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.77.0/core/ops/drop/trait.Drop.html\" title=\"trait core::ops::drop::Drop\">Drop</a> for <a class=\"struct\" href=\"async_io/struct.Async.html\" title=\"struct async_io::Async\">Async</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.drop\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/async_io/lib.rs.html#1105\">source</a><a href=\"#method.drop\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.77.0/core/ops/drop/trait.Drop.html#tymethod.drop\" class=\"fn\">drop</a>(&amp;mut self)</h4></section></summary><div class='docblock'>Executes the destructor for this type. <a href=\"https://doc.rust-lang.org/1.77.0/core/ops/drop/trait.Drop.html#tymethod.drop\">Read more</a></div></details></div></details>","Drop","libp2p_tcp::provider::async_io::TcpStream"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsRef%3CT%3E-for-Async%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/async_io/lib.rs.html#1092\">source</a><a href=\"#impl-AsRef%3CT%3E-for-Async%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.77.0/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;T&gt; for <a class=\"struct\" href=\"async_io/struct.Async.html\" title=\"struct async_io::Async\">Async</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_ref\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/async_io/lib.rs.html#1093\">source</a><a href=\"#method.as_ref\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.77.0/core/convert/trait.AsRef.html#tymethod.as_ref\" class=\"fn\">as_ref</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.0/std/primitive.reference.html\">&amp;T</a></h4></section></summary><div class='docblock'>Converts this type into a shared reference of the (usually inferred) input type.</div></details></div></details>","AsRef<T>","libp2p_tcp::provider::async_io::TcpStream"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsRawFd-for-Async%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/async_io/lib.rs.html#665\">source</a><a href=\"#impl-AsRawFd-for-Async%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.77.0/std/os/fd/raw/trait.AsRawFd.html\" title=\"trait std::os::fd::raw::AsRawFd\">AsRawFd</a> for <a class=\"struct\" href=\"async_io/struct.Async.html\" title=\"struct async_io::Async\">Async</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.77.0/std/os/fd/raw/trait.AsRawFd.html\" title=\"trait std::os::fd::raw::AsRawFd\">AsRawFd</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_raw_fd\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/async_io/lib.rs.html#666\">source</a><a href=\"#method.as_raw_fd\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.77.0/std/os/fd/raw/trait.AsRawFd.html#tymethod.as_raw_fd\" class=\"fn\">as_raw_fd</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.0/std/primitive.i32.html\">i32</a></h4></section></summary><div class='docblock'>Extracts the raw file descriptor. <a href=\"https://doc.rust-lang.org/1.77.0/std/os/fd/raw/trait.AsRawFd.html#tymethod.as_raw_fd\">Read more</a></div></details></div></details>","AsRawFd","libp2p_tcp::provider::async_io::TcpStream"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsyncRead-for-Async%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/async_io/lib.rs.html#1116\">source</a><a href=\"#impl-AsyncRead-for-Async%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"futures_io/if_std/trait.AsyncRead.html\" title=\"trait futures_io::if_std::AsyncRead\">AsyncRead</a> for <a class=\"struct\" href=\"async_io/struct.Async.html\" title=\"struct async_io::Async\">Async</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.77.0/std/io/trait.Read.html\" title=\"trait std::io::Read\">Read</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.poll_read\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/async_io/lib.rs.html#1117-1121\">source</a><a href=\"#method.poll_read\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"futures_io/if_std/trait.AsyncRead.html#tymethod.poll_read\" class=\"fn\">poll_read</a>(\n    self: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.77.0/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;&amp;mut <a class=\"struct\" href=\"async_io/struct.Async.html\" title=\"struct async_io::Async\">Async</a>&lt;T&gt;&gt;,\n    cx: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.77.0/core/task/wake/struct.Context.html\" title=\"struct core::task::wake::Context\">Context</a>&lt;'_&gt;,\n    buf: &amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.0/std/primitive.u8.html\">u8</a>]\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.77.0/core/task/poll/enum.Poll.html\" title=\"enum core::task::poll::Poll\">Poll</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.77.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.0/std/primitive.usize.html\">usize</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.77.0/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt;&gt;</h4></section></summary><div class='docblock'>Attempt to read from the <code>AsyncRead</code> into <code>buf</code>. <a href=\"futures_io/if_std/trait.AsyncRead.html#tymethod.poll_read\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.poll_read_vectored\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/async_io/lib.rs.html#1131-1135\">source</a><a href=\"#method.poll_read_vectored\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"futures_io/if_std/trait.AsyncRead.html#method.poll_read_vectored\" class=\"fn\">poll_read_vectored</a>(\n    self: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.77.0/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;&amp;mut <a class=\"struct\" href=\"async_io/struct.Async.html\" title=\"struct async_io::Async\">Async</a>&lt;T&gt;&gt;,\n    cx: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.77.0/core/task/wake/struct.Context.html\" title=\"struct core::task::wake::Context\">Context</a>&lt;'_&gt;,\n    bufs: &amp;mut [<a class=\"struct\" href=\"https://doc.rust-lang.org/1.77.0/std/io/struct.IoSliceMut.html\" title=\"struct std::io::IoSliceMut\">IoSliceMut</a>&lt;'_&gt;]\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.77.0/core/task/poll/enum.Poll.html\" title=\"enum core::task::poll::Poll\">Poll</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.77.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.0/std/primitive.usize.html\">usize</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.77.0/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt;&gt;</h4></section></summary><div class='docblock'>Attempt to read from the <code>AsyncRead</code> into <code>bufs</code> using vectored\nIO operations. <a href=\"futures_io/if_std/trait.AsyncRead.html#method.poll_read_vectored\">Read more</a></div></details></div></details>","AsyncRead","libp2p_tcp::provider::async_io::TcpStream"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsMut%3CT%3E-for-Async%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/async_io/lib.rs.html#1098\">source</a><a href=\"#impl-AsMut%3CT%3E-for-Async%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.77.0/core/convert/trait.AsMut.html\" title=\"trait core::convert::AsMut\">AsMut</a>&lt;T&gt; for <a class=\"struct\" href=\"async_io/struct.Async.html\" title=\"struct async_io::Async\">Async</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/async_io/lib.rs.html#1099\">source</a><a href=\"#method.as_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.77.0/core/convert/trait.AsMut.html#tymethod.as_mut\" class=\"fn\">as_mut</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.0/std/primitive.reference.html\">&amp;mut T</a></h4></section></summary><div class='docblock'>Converts this type into a mutable reference of the (usually inferred) input type.</div></details></div></details>","AsMut<T>","libp2p_tcp::provider::async_io::TcpStream"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsFd-for-Async%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/async_io/lib.rs.html#672\">source</a><a href=\"#impl-AsFd-for-Async%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.77.0/std/os/fd/owned/trait.AsFd.html\" title=\"trait std::os::fd::owned::AsFd\">AsFd</a> for <a class=\"struct\" href=\"async_io/struct.Async.html\" title=\"struct async_io::Async\">Async</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.77.0/std/os/fd/owned/trait.AsFd.html\" title=\"trait std::os::fd::owned::AsFd\">AsFd</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_fd\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/async_io/lib.rs.html#673\">source</a><a href=\"#method.as_fd\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.77.0/std/os/fd/owned/trait.AsFd.html#tymethod.as_fd\" class=\"fn\">as_fd</a>(&amp;self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.77.0/std/os/fd/owned/struct.BorrowedFd.html\" title=\"struct std::os::fd::owned::BorrowedFd\">BorrowedFd</a>&lt;'_&gt;</h4></section></summary><div class='docblock'>Borrows the file descriptor. <a href=\"https://doc.rust-lang.org/1.77.0/std/os/fd/owned/trait.AsFd.html#tymethod.as_fd\">Read more</a></div></details></div></details>","AsFd","libp2p_tcp::provider::async_io::TcpStream"]]
};if (window.register_type_impls) {window.register_type_impls(type_impls);} else {window.pending_type_impls = type_impls;}})()